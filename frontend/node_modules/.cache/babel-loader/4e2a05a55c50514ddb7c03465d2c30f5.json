{"ast":null,"code":"import _classCallCheck from \"/Users/macbookpro/Desktop/Elisa/LIHO/liho/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/macbookpro/Desktop/Elisa/LIHO/liho/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ElementType } from \"domelementtype\";\nimport { Element, Text, Comment, CDATA, Document, ProcessingInstruction } from \"./node.js\";\nexport * from \"./node.js\";\n// Default options\nvar defaultOpts = {\n  withStartIndices: false,\n  withEndIndices: false,\n  xmlMode: false\n};\nexport var DomHandler = /*#__PURE__*/function () {\n  /**\n   * @param callback Called once parsing has completed.\n   * @param options Settings for the handler.\n   * @param elementCB Callback whenever a tag is closed.\n   */\n  function DomHandler(callback, options, elementCB) {\n    _classCallCheck(this, DomHandler);\n    /** The elements of the DOM */\n    this.dom = [];\n    /** The root element for the DOM */\n    this.root = new Document(this.dom);\n    /** Indicated whether parsing has been completed. */\n    this.done = false;\n    /** Stack of open tags. */\n    this.tagStack = [this.root];\n    /** A data node that is still being written to. */\n    this.lastNode = null;\n    /** Reference to the parser instance. Used for location information. */\n    this.parser = null;\n    // Make it possible to skip arguments, for backwards-compatibility\n    if (typeof options === \"function\") {\n      elementCB = options;\n      options = defaultOpts;\n    }\n    if (typeof callback === \"object\") {\n      options = callback;\n      callback = undefined;\n    }\n    this.callback = callback !== null && callback !== void 0 ? callback : null;\n    this.options = options !== null && options !== void 0 ? options : defaultOpts;\n    this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n  }\n  _createClass(DomHandler, [{\n    key: \"onparserinit\",\n    value: function onparserinit(parser) {\n      this.parser = parser;\n    } // Resets the handler back to starting state\n  }, {\n    key: \"onreset\",\n    value: function onreset() {\n      this.dom = [];\n      this.root = new Document(this.dom);\n      this.done = false;\n      this.tagStack = [this.root];\n      this.lastNode = null;\n      this.parser = null;\n    } // Signals the handler that parsing is done\n  }, {\n    key: \"onend\",\n    value: function onend() {\n      if (this.done) return;\n      this.done = true;\n      this.parser = null;\n      this.handleCallback(null);\n    }\n  }, {\n    key: \"onerror\",\n    value: function onerror(error) {\n      this.handleCallback(error);\n    }\n  }, {\n    key: \"onclosetag\",\n    value: function onclosetag() {\n      this.lastNode = null;\n      var elem = this.tagStack.pop();\n      if (this.options.withEndIndices) {\n        elem.endIndex = this.parser.endIndex;\n      }\n      if (this.elementCB) this.elementCB(elem);\n    }\n  }, {\n    key: \"onopentag\",\n    value: function onopentag(name, attribs) {\n      var type = this.options.xmlMode ? ElementType.Tag : undefined;\n      var element = new Element(name, attribs, undefined, type);\n      this.addNode(element);\n      this.tagStack.push(element);\n    }\n  }, {\n    key: \"ontext\",\n    value: function ontext(data) {\n      var lastNode = this.lastNode;\n      if (lastNode && lastNode.type === ElementType.Text) {\n        lastNode.data += data;\n        if (this.options.withEndIndices) {\n          lastNode.endIndex = this.parser.endIndex;\n        }\n      } else {\n        var node = new Text(data);\n        this.addNode(node);\n        this.lastNode = node;\n      }\n    }\n  }, {\n    key: \"oncomment\",\n    value: function oncomment(data) {\n      if (this.lastNode && this.lastNode.type === ElementType.Comment) {\n        this.lastNode.data += data;\n        return;\n      }\n      var node = new Comment(data);\n      this.addNode(node);\n      this.lastNode = node;\n    }\n  }, {\n    key: \"oncommentend\",\n    value: function oncommentend() {\n      this.lastNode = null;\n    }\n  }, {\n    key: \"oncdatastart\",\n    value: function oncdatastart() {\n      var text = new Text(\"\");\n      var node = new CDATA([text]);\n      this.addNode(node);\n      text.parent = node;\n      this.lastNode = text;\n    }\n  }, {\n    key: \"oncdataend\",\n    value: function oncdataend() {\n      this.lastNode = null;\n    }\n  }, {\n    key: \"onprocessinginstruction\",\n    value: function onprocessinginstruction(name, data) {\n      var node = new ProcessingInstruction(name, data);\n      this.addNode(node);\n    }\n  }, {\n    key: \"handleCallback\",\n    value: function handleCallback(error) {\n      if (typeof this.callback === \"function\") {\n        this.callback(error, this.dom);\n      } else if (error) {\n        throw error;\n      }\n    }\n  }, {\n    key: \"addNode\",\n    value: function addNode(node) {\n      var parent = this.tagStack[this.tagStack.length - 1];\n      var previousSibling = parent.children[parent.children.length - 1];\n      if (this.options.withStartIndices) {\n        node.startIndex = this.parser.startIndex;\n      }\n      if (this.options.withEndIndices) {\n        node.endIndex = this.parser.endIndex;\n      }\n      parent.children.push(node);\n      if (previousSibling) {\n        node.prev = previousSibling;\n        previousSibling.next = node;\n      }\n      node.parent = parent;\n      this.lastNode = null;\n    }\n  }]);\n  return DomHandler;\n}();\nexport default DomHandler;","map":null,"metadata":{},"sourceType":"module"}