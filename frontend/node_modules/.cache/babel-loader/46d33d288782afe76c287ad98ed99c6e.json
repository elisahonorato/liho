{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Elisa/LIHO/liho/src/component/Csv.js\";\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Parser } from 'html-to-react';\nvar htmlToReactParser = new Parser();\nexport default function MyDropzone(_ref) {\n  var pyodide = _ref.pyodide,\n    setReadFile = _ref.setReadFile,\n    readFile = _ref.readFile,\n    setHeaderData = _ref.setHeaderData,\n    headerData = _ref.headerData,\n    setEpisodeData = _ref.setEpisodeData,\n    episodeData = _ref.episodeData;\n  useEffect(function () {\n    pyodide.loadPackage(['pandas', 'xlrd']).then(function () {\n      var pythonScript = \"\\nimport pandas as pd\\nimport io\\nheadercols = {\\n  'CHILD',\\n  'SEX',\\n  'DOB',\\n  'ETHNIC',\\n  'UPN',\\n  'MOTHER',\\n  'MC_DOB'\\n}\\nepisodecols = {\\n  'CHILD',\\n  'DECOM',\\n  'RNE',\\n  'LS',\\n  'CIN',\\n  'PLACE',\\n  'PLACE_PROVIDER',\\n  'DEC',\\n  'REC',\\n  'REASON_PLACE_CHANGE',\\n  'HOME_POST',\\n  'PL_POST',\\n  'URN'\\n}\\nethniccodes = [\\n  \\\"ABAN\\\",\\n  \\\"AIND\\\",\\n  \\\"AMPK\\\",\\n  \\\"AOPK\\\",\\n  \\\"AOTH\\\",\\n  \\\"BAFR\\\",\\n  \\\"BCRB\\\",\\n  \\\"BOTH\\\",\\n  \\\"CHNE\\\"\\n]\\ndef checkForNull(df, col):\\n  df.loc[df[col].isnull(), '_Errors'] = True\\n  return df\\ndef checkEthnicCode(df, col):\\n  df.loc[df[col].isin(ethniccodes), '_Errors'] = True\\n  return df\\ndef checkPostCode(df, col):\\n  postcoderegex = r'([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9][A-Za-z]?))))s?[0-9][A-Za-z]{2})'\\n  slicedf = df[col].str.contains(postcoderegex)\\n  slicedf = slicedf.fillna(False)\\n  df.loc[slicedf == False, '_Errors'] = True\\n  return df\\ndef runHeaderTests(df):\\n  df = checkForNull(df, \\\"CHILD\\\")\\n  df = checkForNull(df, \\\"UPN\\\")\\n  df = checkEthnicCode(df, \\\"ETHNIC\\\")\\n  return df\\ndef runEpisodeTests(df):\\n  df = checkForNull(df, \\\"CHILD\\\")\\n  df = checkForNull(df, \\\"URN\\\")\\n  #df = checkPostCode(df, \\\"HOME_POST\\\")\\n  #df = checkPostCode(df, \\\"PL_POST\\\")\\n  return df\\ndef detectType(df):\\n  if set(df.columns) == headercols:\\n    return \\\"Headers\\\"\\n  elif set(df.columns) == episodecols:\\n    return \\\"Episodes\\\"\\n  else:\\n    return \\\"Unknown\\\"\\ndef read_file(file, buffer):\\n    data = io.BytesIO(buffer.tobytes())\\n    print(\\\"Determining File Type...\\\")\\n    if \\\"xls\\\" in file.name:\\n        df = pd.read_excel(data)\\n    else:\\n        df = pd.read_csv(data)\\n    print(\\\"Detecting Data Type...\\\")\\n    datatype = detectType(df)\\n    df['_Errors'] = False\\n    print(\\\"Running Tests...\\\")\\n    if datatype == \\\"Headers\\\":\\n      df = runHeaderTests(df)\\n    elif datatype == \\\"Episodes\\\":\\n      df = runEpisodeTests(df)\\n    print(\\\"Outputting results...\\\")\\n    return df.to_json(), datatype\\n        \";\n      pyodide.runPython(pythonScript);\n      var readFile = pyodide.pyimport('read_file');\n      setReadFile({\n        readFile: readFile\n      });\n    });\n  }, [pyodide]);\n  var onDrop = useCallback(function (acceptedFiles) {\n    acceptedFiles.forEach(function (file) {\n      console.log(file);\n      var reader = new FileReader();\n      reader.onabort = function () {\n        return console.log('file reading was aborted');\n      };\n      reader.onerror = function () {\n        return console.log('file reading has failed');\n      };\n      reader.onload = function () {\n        // Do whatever you want with the file contents\n        var buffer = reader.result;\n        var filedata = readFile.readFile(file, buffer);\n        if (filedata[1] == \"Headers\") {\n          setHeaderData(JSON.parse(filedata[0]));\n        }\n        if (filedata[1] == \"Episodes\") {\n          setEpisodeData(JSON.parse(filedata[0]));\n        }\n        //service.parseFile(buffer);\n        // const htmlTable = readFile.readFile(file, buffer);\n        // const reactElement = htmlToReactParser.parse(htmlTable);\n        // setTable(reactElement);\n      };\n\n      reader.readAsArrayBuffer(file);\n    });\n  }, [readFile]);\n  var _useDropzone = useDropzone({\n      onDrop: onDrop\n    }),\n    getRootProps = _useDropzone.getRootProps,\n    getInputProps = _useDropzone.getInputProps;\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, !readFile && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, \"Loading Pandas....\"), readFile && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: \"App-dropzone\"\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 19\n    }\n  }, \"Drag 'n' drop files here, or click to select\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"FileUploadProgress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, headerData ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  }, \"Header Data Loaded\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 60\n    }\n  }, \"Still need to load Header Data\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, episodeData ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 34\n    }\n  }, \"Episode Data Loaded\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 62\n    }\n  }, \"Still need to load Episode Data\")))));\n}","map":{"version":3,"names":["React","useCallback","useState","useEffect","useDropzone","Parser","htmlToReactParser","MyDropzone","pyodide","setReadFile","readFile","setHeaderData","headerData","setEpisodeData","episodeData","loadPackage","then","pythonScript","runPython","pyimport","onDrop","acceptedFiles","forEach","file","console","log","reader","FileReader","onabort","onerror","onload","buffer","result","filedata","JSON","parse","readAsArrayBuffer","getRootProps","getInputProps"],"sources":["/Users/macbookpro/Desktop/Elisa/LIHO/liho/src/component/Csv.js"],"sourcesContent":["\nimport React, {useCallback, useState, useEffect} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Parser } from 'html-to-react'\n\n\nconst htmlToReactParser = new Parser();\n\nexport default function MyDropzone({pyodide, setReadFile, readFile, setHeaderData, headerData, setEpisodeData, episodeData}) {\n\n    useEffect(() => {\n        pyodide.loadPackage(['pandas','xlrd']).then(() => {\n            const pythonScript = `\nimport pandas as pd\nimport io\nheadercols = {\n  'CHILD',\n  'SEX',\n  'DOB',\n  'ETHNIC',\n  'UPN',\n  'MOTHER',\n  'MC_DOB'\n}\nepisodecols = {\n  'CHILD',\n  'DECOM',\n  'RNE',\n  'LS',\n  'CIN',\n  'PLACE',\n  'PLACE_PROVIDER',\n  'DEC',\n  'REC',\n  'REASON_PLACE_CHANGE',\n  'HOME_POST',\n  'PL_POST',\n  'URN'\n}\nethniccodes = [\n  \"ABAN\",\n  \"AIND\",\n  \"AMPK\",\n  \"AOPK\",\n  \"AOTH\",\n  \"BAFR\",\n  \"BCRB\",\n  \"BOTH\",\n  \"CHNE\"\n]\ndef checkForNull(df, col):\n  df.loc[df[col].isnull(), '_Errors'] = True\n  return df\ndef checkEthnicCode(df, col):\n  df.loc[df[col].isin(ethniccodes), '_Errors'] = True\n  return df\ndef checkPostCode(df, col):\n  postcoderegex = r'([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9][A-Za-z]?))))\\s?[0-9][A-Za-z]{2})'\n  slicedf = df[col].str.contains(postcoderegex)\n  slicedf = slicedf.fillna(False)\n  df.loc[slicedf == False, '_Errors'] = True\n  return df\ndef runHeaderTests(df):\n  df = checkForNull(df, \"CHILD\")\n  df = checkForNull(df, \"UPN\")\n  df = checkEthnicCode(df, \"ETHNIC\")\n  return df\ndef runEpisodeTests(df):\n  df = checkForNull(df, \"CHILD\")\n  df = checkForNull(df, \"URN\")\n  #df = checkPostCode(df, \"HOME_POST\")\n  #df = checkPostCode(df, \"PL_POST\")\n  return df\ndef detectType(df):\n  if set(df.columns) == headercols:\n    return \"Headers\"\n  elif set(df.columns) == episodecols:\n    return \"Episodes\"\n  else:\n    return \"Unknown\"\ndef read_file(file, buffer):\n    data = io.BytesIO(buffer.tobytes())\n    print(\"Determining File Type...\")\n    if \"xls\" in file.name:\n        df = pd.read_excel(data)\n    else:\n        df = pd.read_csv(data)\n    print(\"Detecting Data Type...\")\n    datatype = detectType(df)\n    df['_Errors'] = False\n    print(\"Running Tests...\")\n    if datatype == \"Headers\":\n      df = runHeaderTests(df)\n    elif datatype == \"Episodes\":\n      df = runEpisodeTests(df)\n    print(\"Outputting results...\")\n    return df.to_json(), datatype\n        `;\n            pyodide.runPython(pythonScript);\n            const readFile = pyodide.pyimport('read_file');\n            setReadFile({readFile});\n        });\n    }, [pyodide]);\n\n    const onDrop = useCallback((acceptedFiles) => {\n        acceptedFiles.forEach((file) => {\n            console.log(file);\n            const reader = new FileReader();\n\n            reader.onabort = () => console.log('file reading was aborted');\n            reader.onerror = () => console.log('file reading has failed');\n            reader.onload = () => {\n                // Do whatever you want with the file contents\n                const buffer = reader.result;\n                const filedata = readFile.readFile(file, buffer);\n                if (filedata[1] == \"Headers\") {\n                  setHeaderData(JSON.parse(filedata[0]))\n                } if (filedata[1] == \"Episodes\") {\n                  setEpisodeData(JSON.parse(filedata[0]))\n                }\n                //service.parseFile(buffer);\n                // const htmlTable = readFile.readFile(file, buffer);\n                // const reactElement = htmlToReactParser.parse(htmlTable);\n                // setTable(reactElement);\n            };\n            reader.readAsArrayBuffer(file);\n        })\n\n    }, [readFile])\n    const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n    return (\n        <>\n            {!readFile && (\n                <div>Loading Pandas....</div>\n            )}\n            {readFile && (\n            <div>\n              <div className=\"App-dropzone\" {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <p>Drag 'n' drop files here, or click to select</p>\n              </div>\n              <div className=\"FileUploadProgress\">\n                <div>\n                  {headerData ? <p>Header Data Loaded</p>: <p>Still need to load Header Data</p>}\n                </div>\n\n                <div>\n                  {episodeData ? <p>Episode Data Loaded</p>: <p>Still need to load Episode Data</p>}\n                </div>\n              </div>\n            </div>\n            )}\n        </>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}