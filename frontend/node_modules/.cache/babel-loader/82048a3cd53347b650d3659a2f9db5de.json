{"ast":null,"code":"'use strict';\n\nvar HtmlParser = require('htmlparser2').Parser;\nvar DomHandler = require('domhandler').DomHandler;\nvar ProcessingInstructions = require('./processing-instructions');\nvar IsValidNodeDefinitions = require('./is-valid-node-definitions');\nvar utils = require('./utils');\nfunction Html2ReactParser(options) {\n  function parseHtmlToTree(html) {\n    options = options || {};\n    options.decodeEntities = true;\n    var handler = new DomHandler();\n    var parser = new HtmlParser(handler, options);\n    parser.parseComplete(html);\n    return handler.dom.filter(function (element) {\n      return element.type !== 'directive';\n    });\n  }\n  ;\n  function traverseDom(node, isValidNode, processingInstructions, preprocessingInstructions, index) {\n    if (isValidNode(node)) {\n      (preprocessingInstructions || []).forEach(function (instruction) {\n        if (instruction.shouldPreprocessNode(node)) {\n          instruction.preprocessNode(node, index);\n        }\n      });\n      var processingInstruction = (processingInstructions || []).find(function (instruction) {\n        return instruction.shouldProcessNode(node);\n      });\n      if (processingInstruction != null) {\n        var children = (node.children || []).map(function (child, i) {\n          return traverseDom(child, isValidNode, processingInstructions, preprocessingInstructions, i);\n        }).filter(function (child) {\n          return child != null && child !== false;\n        });\n        if (processingInstruction.replaceChildren) {\n          return utils.createElement(node, index, node.data, [processingInstruction.processNode(node, children, index)]);\n        } else {\n          return processingInstruction.processNode(node, children, index);\n        }\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  ;\n  function parseWithInstructions(html, isValidNode, processingInstructions, preprocessingInstructions) {\n    var domTree = parseHtmlToTree(html);\n    var list = domTree.map(function (domTreeItem, index) {\n      return traverseDom(domTreeItem, isValidNode, processingInstructions, preprocessingInstructions, index);\n    });\n    return list.length <= 1 ? list[0] : list;\n  }\n  ;\n  function parse(html) {\n    var processingInstructions = new ProcessingInstructions();\n    return parseWithInstructions(html, IsValidNodeDefinitions.alwaysValid, processingInstructions.defaultProcessingInstructions);\n  }\n  ;\n  return {\n    parse: parse,\n    parseWithInstructions: parseWithInstructions\n  };\n}\n;\nmodule.exports = Html2ReactParser;","map":null,"metadata":{},"sourceType":"script"}