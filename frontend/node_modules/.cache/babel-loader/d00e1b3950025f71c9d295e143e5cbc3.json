{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/macbookpro/Desktop/Elisa/LIHO/liho/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar camelCase = require('lodash.camelcase');\nvar React = require('react');\nvar camelCaseAttrMap = require('./camel-case-attribute-names');\nfunction createStyleJsonFromString(styleString) {\n  styleString = styleString || '';\n  var styles = styleString.split(/;(?!base64)/);\n  var singleStyle,\n    key,\n    value,\n    jsonStyles = {};\n  for (var i = 0; i < styles.length; ++i) {\n    singleStyle = styles[i].split(':');\n    if (singleStyle.length > 2) {\n      singleStyle[1] = singleStyle.slice(1).join(':');\n    }\n    key = singleStyle[0];\n    value = singleStyle[1];\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n    if (key != null && value != null && key.length > 0 && value.length > 0) {\n      jsonStyles[camelCase(key)] = value;\n    }\n  }\n  return jsonStyles;\n}\n\n// Boolean HTML attributes, copied from https://meiert.com/en/blog/boolean-attributes-of-html/,\n// on the form React expects.\nvar booleanAttrs = ['allowFullScreen', 'allowpaymentrequest', 'async', 'autoFocus', 'autoPlay', 'checked', 'controls', 'default', 'disabled', 'formNoValidate', 'hidden', 'ismap', 'itemScope', 'loop', 'multiple', 'muted', 'nomodule', 'noValidate', 'open', 'playsinline', 'readOnly', 'required', 'reversed', 'selected', 'truespeed'];\nfunction createElement(node, index, data, children) {\n  var elementProps = {\n    key: index\n  };\n  if (node.attribs) {\n    elementProps = Object.entries(node.attribs).reduce(function (result, _ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n      key = camelCaseAttrMap[key.replace(/[-:]/, '')] || key;\n      if (key === 'style') {\n        value = createStyleJsonFromString(value);\n      } else if (key === 'class') {\n        key = 'className';\n      } else if (key === 'for') {\n        key = 'htmlFor';\n      } else if (key.startsWith('on')) {\n        value = Function(value);\n      }\n      if (booleanAttrs.includes(key) && (value || '') === '') {\n        value = key;\n      }\n      result[key] = value;\n      return result;\n    }, elementProps);\n  }\n  children = children || [];\n  var allChildren = data != null ? [data].concat(children) : children;\n  return React.createElement.apply(null, [node.name, elementProps].concat(allChildren));\n}\nmodule.exports = {\n  createElement: createElement\n};","map":null,"metadata":{},"sourceType":"script"}