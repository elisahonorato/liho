{"ast":null,"code":"import _slicedToArray from \"/Users/macbookpro/Desktop/Elisa/LIHO/liho/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/macbookpro/Desktop/Elisa/LIHO/liho/src/component/Csv.js\";\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport parse from 'html-react-parser';\nvar htmlToReactParser = new parse(\"hola\");\nexport default function MyDropzone(_ref) {\n  var pyodide = _ref.pyodide;\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    readFile = _useState2[0],\n    setReadFile = _useState2[1];\n  var _useState3 = useState(undefined),\n    _useState4 = _slicedToArray(_useState3, 2),\n    table = _useState4[0],\n    setTable = _useState4[1];\n  useEffect(function () {\n    pyodide.loadPackage(['pandas', 'xlrd']).then(function () {\n      var pythonScript = \"\\nimport pandas as pd\\nimport io\\ndef read_file(file, buffer):\\n    data = io.BytesIO(buffer.tobytes())\\n    if \\\"xls\\\" in file.name:\\n        df = pd.read_excel(data)\\n    else: \\n        df = pd.read_csv(data)\\n        \\n    return df.to_html()\\n        \";\n      pyodide.runPython(pythonScript);\n      var readFile = pyodide.pyimport('read_file');\n      setReadFile({\n        readFile: readFile\n      });\n    });\n  }, [pyodide]);\n  var onDrop = useCallback(function (acceptedFiles) {\n    acceptedFiles.forEach(function (file) {\n      console.log(file);\n      var reader = new FileReader();\n      reader.onabort = function () {\n        return console.log('file reading was aborted');\n      };\n      reader.onerror = function () {\n        return console.log('file reading has failed');\n      };\n      reader.onload = function () {\n        // Do whatever you want with the file contents\n        var buffer = reader.result;\n        var htmlTable = readFile.readFile(file, buffer);\n        var reactElement = htmlToReactParser.parse(htmlTable);\n        setTable(reactElement);\n      };\n      reader.readAsArrayBuffer(file);\n    });\n  }, [readFile]);\n  var _useDropzone = useDropzone({\n      onDrop: onDrop\n    }),\n    getRootProps = _useDropzone.getRootProps,\n    getInputProps = _useDropzone.getInputProps;\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, !readFile && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"Loading Pandas....\"), readFile && /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    className: \"App-dropzone\"\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, \"Drag 'n' drop some files here, or click to select files\")), table && table);\n}","map":{"version":3,"names":["React","useCallback","useState","useEffect","useDropzone","parse","htmlToReactParser","MyDropzone","pyodide","undefined","readFile","setReadFile","table","setTable","loadPackage","then","pythonScript","runPython","pyimport","onDrop","acceptedFiles","forEach","file","console","log","reader","FileReader","onabort","onerror","onload","buffer","result","htmlTable","reactElement","readAsArrayBuffer","getRootProps","getInputProps"],"sources":["/Users/macbookpro/Desktop/Elisa/LIHO/liho/src/component/Csv.js"],"sourcesContent":["\nimport React, {useCallback, useState, useEffect} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport parse from 'html-react-parser';\n\nconst htmlToReactParser = new parse(\"hola\");\n\nexport default function MyDropzone({pyodide}) {\n    const [readFile, setReadFile] = useState(undefined);\n    const [table, setTable] = useState(undefined);\n\n    useEffect(() => {\n        pyodide.loadPackage(['pandas','xlrd']).then(() => {\n            const pythonScript = `\nimport pandas as pd\nimport io\ndef read_file(file, buffer):\n    data = io.BytesIO(buffer.tobytes())\n    if \"xls\" in file.name:\n        df = pd.read_excel(data)\n    else: \n        df = pd.read_csv(data)\n        \n    return df.to_html()\n        `;\n            pyodide.runPython(pythonScript);\n            const readFile = pyodide.pyimport('read_file');\n            setReadFile({readFile});\n        });\n    }, [pyodide]);\n\n    const onDrop = useCallback((acceptedFiles) => {\n        acceptedFiles.forEach((file) => {\n            console.log(file);\n            const reader = new FileReader();\n\n            reader.onabort = () => console.log('file reading was aborted');\n            reader.onerror = () => console.log('file reading has failed');\n            reader.onload = () => {\n                // Do whatever you want with the file contents\n                const buffer = reader.result;\n                const htmlTable = readFile.readFile(file, buffer);\n                const reactElement = htmlToReactParser.parse(htmlTable);\n                setTable(reactElement);\n            };\n            reader.readAsArrayBuffer(file);\n        })\n\n    }, [readFile])\n    const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n    return (\n        <>\n            {!readFile && (\n                <div>Loading Pandas....</div>\n            )}\n            {readFile && (\n            <div className=\"App-dropzone\" {...getRootProps()}>\n                <input {...getInputProps()} />\n                <p>Drag 'n' drop some files here, or click to select files</p>\n            </div>\n            )}\n            { table && (table)}\n        </>\n    )\n}\n"],"mappings":";;AACA,OAAOA,KAAK,IAAGC,WAAW,EAAEC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAC7D,SAAQC,WAAW,QAAO,gBAAgB;AAC1C,OAAOC,KAAK,MAAM,mBAAmB;AAErC,IAAMC,iBAAiB,GAAG,IAAID,KAAK,CAAC,MAAM,CAAC;AAE3C,eAAe,SAASE,UAAU,OAAY;EAAA,IAAVC,OAAO,QAAPA,OAAO;EAAA,gBACPN,QAAQ,CAACO,SAAS,CAAC;IAAA;IAA5CC,QAAQ;IAAEC,WAAW;EAAA,iBACFT,QAAQ,CAACO,SAAS,CAAC;IAAA;IAAtCG,KAAK;IAAEC,QAAQ;EAEtBV,SAAS,CAAC,YAAM;IACZK,OAAO,CAACM,WAAW,CAAC,CAAC,QAAQ,EAAC,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,YAAM;MAC9C,IAAMC,YAAY,qQAWrB;MACGR,OAAO,CAACS,SAAS,CAACD,YAAY,CAAC;MAC/B,IAAMN,QAAQ,GAAGF,OAAO,CAACU,QAAQ,CAAC,WAAW,CAAC;MAC9CP,WAAW,CAAC;QAACD,QAAQ,EAARA;MAAQ,CAAC,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,CAACF,OAAO,CAAC,CAAC;EAEb,IAAMW,MAAM,GAAGlB,WAAW,CAAC,UAACmB,aAAa,EAAK;IAC1CA,aAAa,CAACC,OAAO,CAAC,UAACC,IAAI,EAAK;MAC5BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAMG,MAAM,GAAG,IAAIC,UAAU,EAAE;MAE/BD,MAAM,CAACE,OAAO,GAAG;QAAA,OAAMJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAAA;MAC9DC,MAAM,CAACG,OAAO,GAAG;QAAA,OAAML,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MAAA;MAC7DC,MAAM,CAACI,MAAM,GAAG,YAAM;QAClB;QACA,IAAMC,MAAM,GAAGL,MAAM,CAACM,MAAM;QAC5B,IAAMC,SAAS,GAAGtB,QAAQ,CAACA,QAAQ,CAACY,IAAI,EAAEQ,MAAM,CAAC;QACjD,IAAMG,YAAY,GAAG3B,iBAAiB,CAACD,KAAK,CAAC2B,SAAS,CAAC;QACvDnB,QAAQ,CAACoB,YAAY,CAAC;MAC1B,CAAC;MACDR,MAAM,CAACS,iBAAiB,CAACZ,IAAI,CAAC;IAClC,CAAC,CAAC;EAEN,CAAC,EAAE,CAACZ,QAAQ,CAAC,CAAC;EAAA,mBACwBN,WAAW,CAAC;MAACe,MAAM,EAANA;IAAM,CAAC,CAAC;IAApDgB,YAAY,gBAAZA,YAAY;IAAEC,aAAa,gBAAbA,aAAa;EAElC,oBACI;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACK,CAAC1B,QAAQ,iBACN;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAK,oBAAkB,CAC1B,EACAA,QAAQ,iBACT;IAAK,SAAS,EAAC;EAAc,GAAKyB,YAAY,EAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,iBAC5C,+CAAWC,aAAa,EAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI,eAC9B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAG,yDAAuD,CAAI,CAEjE,EACCxB,KAAK,IAAKA,KAAM,CACnB;AAEX"},"metadata":{},"sourceType":"module"}